name: Manual Schema Test

on:
  workflow_dispatch:
    inputs:
      tested_branch:
        description: 'Branch to test against'
        type: string
        required: true
        default: 'main'
      test_schemas:
        description: 'Test schema validation'
        type: boolean
        required: true
        default: true
      deploy_test:
        description: 'Test artifact deployment'
        type: boolean
        required: true
        default: false
      pkg_schema_version:
        description: 'Package schema version'
        type: string
        required: false
        default: 'v1'
      registry_schema_version:
        description: 'Registry schema version'
        type: string
        required: false
        default: 'v1'

permissions:
  contents: write    # For GitHub Releases
  pages: write       # For GitHub Pages deployment
  id-token: write    # Required for Pages deployment

jobs:
  validate-schemas:
    if: ${{ github.event.inputs.test_schemas == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tested_branch }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install ajv-cli and formats
        run: npm install -g ajv-cli ajv-formats

      - name: Validate schemas
        run: |
          # Make scripts executable
          chmod +x ./scripts/validate_schemas.sh
          
          # Run validation on the specified schema versions
          echo "Validating schemas..."
          ./scripts/validate_schemas.sh "${{ github.event.inputs.pkg_schema_version }}" "${{ github.event.inputs.registry_schema_version }}"

  test-deployment:
    if: ${{ github.event.inputs.deploy_test == 'true' }}
    needs: [validate-schemas]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tested_branch }}

      - name: Set test artifact version
        run: |
          echo "TEST_ID=test-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "TEST_PKG_VERSION=${{ github.event.inputs.pkg_schema_version }}" >> $GITHUB_ENV
          echo "TEST_REG_VERSION=${{ github.event.inputs.registry_schema_version }}" >> $GITHUB_ENV
          
          # Create JSON arrays for each schema type
          echo "PKG_VERSIONS_JSON=[\"${{ github.event.inputs.pkg_schema_version }}\"]" >> $GITHUB_ENV
          echo "REG_VERSIONS_JSON=[\"${{ github.event.inputs.registry_schema_version }}\"]" >> $GITHUB_ENV

      - name: Package schemas for test release
        run: |
          # Make scripts executable
          chmod +x ./scripts/package_schemas.sh
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Use the package_schemas.sh script to package the schemas
          echo "Packaging schemas for testing..."
          ./scripts/package_schemas.sh ./artifacts "$PKG_VERSIONS_JSON" "$REG_VERSIONS_JSON" "${{ github.sha }}"
          
          # Add test ID to the zip filenames
          if [ ! -z "$TEST_PKG_VERSION" ]; then
            mv artifacts/package/schemas-package-$TEST_PKG_VERSION.zip artifacts/package/schemas-package-$TEST_PKG_VERSION-$TEST_ID.zip
          fi
          
          if [ ! -z "$TEST_REG_VERSION" ]; then
            mv artifacts/registry/schemas-registry-$TEST_REG_VERSION.zip artifacts/registry/schemas-registry-$TEST_REG_VERSION-$TEST_ID.zip
          fi

      - name: Upload test artifacts to workflow
        uses: actions/upload-artifact@v4
        with:
          name: schemas-test-${{ env.TEST_ID }}
          path: artifacts/
          retention-days: 3

      - name: Test GitHub Pages deployment
        run: |
          # Make scripts executable
          chmod +x ./scripts/generate_gh_pages.sh
          
          # Create directory for test GitHub Pages content
          mkdir -p test-gh-pages-content
          
          # Use our script to generate test GitHub Pages content
          echo "Generating test GitHub Pages content..."
          ./scripts/generate_gh_pages.sh ./test-gh-pages-content "$TEST_PKG_VERSION" "$TEST_REG_VERSION" "${{ github.repository }}"
          
          # Add test indicator to the generated content
          sed -i 's/<h1>Hatch Schemas<\/h1>/<h1>Hatch Schemas - TEST ENVIRONMENT<\/h1>/g' ./test-gh-pages-content/index.html
          jq '. += {"is_test": true, "test_id": "'"$TEST_ID"'"}' ./test-gh-pages-content/latest.json > ./test-gh-pages-content/latest.json.tmp && mv ./test-gh-pages-content/latest.json.tmp ./test-gh-pages-content/latest.json

      - name: Upload test GitHub Pages content
        uses: actions/upload-artifact@v4
        with:
          name: test-gh-pages-content-${{ env.TEST_ID }}
          path: test-gh-pages-content/
          retention-days: 3

      - name: Echo test deployment URLs
        run: |
          echo "Test deployment URLs:"
          echo ""
          
          if [ ! -z "$TEST_PKG_VERSION" ]; then
            echo "Test Package Schema:"
            echo "- ZIP: artifacts/package/schemas-package-$TEST_PKG_VERSION-$TEST_ID.zip (simulated)"
            echo "- JSON: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tested_branch }}/package/$TEST_PKG_VERSION/hatch_pkg_metadata_schema.json"
          fi
          
          if [ ! -z "$TEST_REG_VERSION" ]; then
            echo "Test Registry Schema:"
            echo "- ZIP: artifacts/registry/schemas-registry-$TEST_REG_VERSION-$TEST_ID.zip (simulated)"
            echo "- JSON: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.inputs.tested_branch }}/registry/$TEST_REG_VERSION/hatch_all_pkg_metadata_schema.json"
          fi
          
          echo ""
          echo "Test GitHub Pages content available in workflow artifacts"