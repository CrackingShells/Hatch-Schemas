name: Schema Validation

# This workflow handles the validation of schemas on pull requests.
# It ensures schemas are correct before they can be merged to the main branch.
# The actual deployment happens in the schema-deployment.yml workflow after merging.

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - schema-updates
    paths:
      - 'package/v*/**'
      - 'registry/v*/**'
      - '.github/workflows/schema-validation.yml'
  
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      force:
        description: 'Force validation even if no changes detected'
        type: boolean
        required: true
        default: false
      pkg_schema_version:
        description: 'Package schema version'
        type: string
        required: false
        default: 'v1'
      registry_schema_version:
        description: 'Registry schema version'
        type: string
        required: false
        default: 'v1'

jobs:
  detect-versions:
    runs-on: ubuntu-latest
    outputs:
      pkg_versions: ${{ steps.get-versions.outputs.pkg_versions }}
      registry_versions: ${{ steps.get-versions.outputs.registry_versions }}
      highest_pkg_version: ${{ steps.get-versions.outputs.highest_pkg_version }}
      highest_registry_version: ${{ steps.get-versions.outputs.highest_registry_version }}
      no-changes: ${{ steps.changed-files.outputs.all_changed_files == '' && (github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force != 'true')) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            package/v*/**
            registry/v*/**

      - name: Stop if no changes detected
        if: steps.changed-files.outputs.all_changed_files == '' && (github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.force != 'true'))
        run: |
          echo "No changes detected in package or registry schemas. Exiting..."
          exit 0

      - name: Detect versions from changed files
        id: get-versions
        run: |
          # Make scripts executable
          chmod +x ./scripts/detect_versions.sh
          
          # Use the script to detect versions from changed files
          echo "Running version detection..."
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Using provided versions for manual validation."
            PKG_VERSION="${{ github.event.inputs.pkg_schema_version }}"
            REG_VERSION="${{ github.event.inputs.registry_schema_version }}"
            
            # Create JSON arrays for each schema type
            echo "pkg_versions=[\"$PKG_VERSION\"]" >> $GITHUB_OUTPUT
            echo "registry_versions=[\"$REG_VERSION\"]" >> $GITHUB_OUTPUT
            echo "highest_pkg_version=$PKG_VERSION" >> $GITHUB_OUTPUT
            echo "highest_registry_version=$REG_VERSION" >> $GITHUB_OUTPUT
          else
            # Process changed files to detect versions
            ./scripts/detect_versions.sh ${{ steps.changed-files.outputs.all_changed_files }}
          fi

  validate-schemas:
    if: needs.detect-versions.outputs.no-changes == 'false'
    runs-on: ubuntu-latest
    needs: [detect-versions]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install ajv-cli and formats
        run: npm install -g ajv-cli ajv-formats

      - name: Validate schemas
        run: |
          # Make scripts executable
          chmod +x ./scripts/validate_schemas.sh
          
          # Run validation on the detected schema versions
          echo "Running schema validation..."
          ./scripts/validate_schemas.sh "${{ needs.detect-versions.outputs.highest_pkg_version }}" "${{ needs.detect-versions.outputs.highest_registry_version }}"
