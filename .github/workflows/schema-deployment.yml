name: Schema Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'package/v*/**'
      - 'registry/v*/**'
      - '.github/workflow/schema-deployment.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'package/v*/**'
      - 'registry/v*/**'

permissions:
  contents: write    # For GitHub Releases
  pages: write       # For GitHub Pages deployment
  id-token: write    # Required for Pages deployment

# Ensure we can deploy to GitHub Pages
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  detect-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.get-versions.outputs.versions }}
      highest_version: ${{ steps.get-versions.outputs.highest_version }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            package/v*/**
            registry/v*/**

      - name: Detect version changes
        id: get-versions
        run: |
          # Find all distinct versions in changed files
          VERSION_PATTERN='(v[0-9]+(\.[0-9]+)*)'
          VERSIONS=()
          
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file =~ $VERSION_PATTERN ]]; then
              VERSIONS+=("${BASH_REMATCH[1]}")
            fi
          done
          
          # Get unique versions
          UNIQUE_VERSIONS=($(echo "${VERSIONS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          
          # Sort versions to find the highest
          if [[ ${#UNIQUE_VERSIONS[@]} -gt 0 ]]; then
            IFS=$'\n' SORTED=($(sort -Vr <<<"${UNIQUE_VERSIONS[*]}"))
            unset IFS
            
            # Join unique versions as a JSON array for output
            VERSIONS_JSON="[\"$(echo "${UNIQUE_VERSIONS[@]}" | sed 's/ /\", \"/g')\"]"
            echo "versions=${VERSIONS_JSON}" >> $GITHUB_OUTPUT
            echo "highest_version=${SORTED[0]}" >> $GITHUB_OUTPUT
            
            echo "Detected versions: ${UNIQUE_VERSIONS[*]}"
            echo "Highest version: ${SORTED[0]}"
          else
            echo "No version pattern detected in changed files"
            echo "versions=[]" >> $GITHUB_OUTPUT
            echo "highest_version=" >> $GITHUB_OUTPUT
            echo "::warning::No schema versions detected in changed files. Stopping workflow."
            exit 0  # Gracefully exit the workflow
          fi

  validate-schemas:
    runs-on: ubuntu-latest
    needs: [detect-versions]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install ajv-cli and formats
        run: npm install -g ajv-cli ajv-formats

      - name: Validate package schema
        run: |
          echo "Validating package schema..."
          ajv compile -s package/${{ steps.detect-versions.outputs.highest_version }}/hatch_pkg_metadata_schema.json --spec=draft7 -c ajv-formats

      - name: Validate registry schema
        run: |
          echo "Validating registry schema..."
          ajv compile -s registry/${{ steps.detect-versions.outputs.highest_version }}/hatch_all_pkg_metadata_schema.json --spec=draft7 -c ajv-formats

  build-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [detect-versions, validate-schemas]
    runs-on: ubuntu-latest
    env:
      VERSIONS: ${{ needs.detect-versions.outputs.versions }}
      HIGHEST_VERSION: ${{ needs.detect-versions.outputs.highest_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse versions
        run: | 
          echo "Deploying versions: $VERSIONS with highest version: $HIGHEST_VERSION"

      - name: Package schemas for all versions
        run: |
          mkdir -p artifacts
          
          # Get the versions as an array
          VERSIONS_ARRAY=$(echo $VERSIONS | jq -r '.[]')
          
          # Loop through each version
          for VERSION in $VERSIONS_ARRAY; do
            echo "Processing version: $VERSION"
            mkdir -p artifacts/$VERSION
            
            # Copy schemas to versioned directory
            cp -r package artifacts/$VERSION/
            cp -r registry artifacts/$VERSION/
            
            # Create metadata files for each version
            echo "{\"version\": \"$VERSION\", \"build_date\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\", \"commit\": \"${{ github.sha }}\"}" > artifacts/$VERSION/metadata.json
            
            # Create version-specific zip for release
            cd artifacts
            zip -r "schemas-$VERSION.zip" $VERSION
            cd ..
          done

      # Create GitHub Release for each version 
      - name: Create GitHub Releases
        run: |
          # Get the versions as an array
          VERSIONS_ARRAY=$(echo $VERSIONS | jq -r '.[]')
          
          # Process each version
          for VERSION in $VERSIONS_ARRAY; do
            echo "Creating release for version: $VERSION"
            
            # Get release asset path
            ASSET_PATH="artifacts/schemas-$VERSION.zip"
            
            # Create a GitHub release using GitHub CLI
            gh release create "schemas-$VERSION" \
              --title "Schema Release $VERSION" \
              --notes "Schema version $VERSION released on $(date -u +"%Y-%m-%d")" \
              "$ASSET_PATH"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Configure GitHub Pages deployment
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Update the "latest" pointer in a minimal GitHub Pages site
      - name: Prepare latest pointer for GitHub Pages
        run: |
          mkdir -p gh-pages-content
          
          # Create an index.html that redirects to the highest version
          cat > gh-pages-content/index.html << EOF
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>CrackingShells Schemas</title>
              <meta http-equiv="refresh" content="0; url=https://github.com/${{ github.repository }}/releases/download/schemas-$HIGHEST_VERSION/schemas-$HIGHEST_VERSION.zip">
            </head>
            <body>
              <h1>CrackingShells Schemas</h1>
              <p>Redirecting to latest version ($HIGHEST_VERSION)...</p>
              <p><a href="https://github.com/${{ github.repository }}/releases/download/schemas-$HIGHEST_VERSION/schemas-$HIGHEST_VERSION.zip">Click here if you are not redirected automatically</a></p>
            </body>
          </html>
          EOF
          
          # Create a JSON file with version information for API consumers
          cat > gh-pages-content/latest.json << EOF
          {
            "latest_version": "$HIGHEST_VERSION",
            "release_url": "https://github.com/${{ github.repository }}/releases/tag/schemas-$HIGHEST_VERSION",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/schemas-$HIGHEST_VERSION/schemas-$HIGHEST_VERSION.zip",
            "schema_urls": {
              "package": "https://raw.githubusercontent.com/${{ github.repository }}/main/package/$HIGHEST_VERSION/hatch_pkg_metadata_schema.json",
              "registry": "https://raw.githubusercontent.com/${{ github.repository }}/main/registry/$HIGHEST_VERSION/hatch_all_pkg_metadata_schema.json"
            },
            "updated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF

      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-content

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Generate URLs for documentation
        run: |
          echo "Schema releases created and deployed!"
          echo ""
          echo "URLs for each version:"
          
          # Get the versions as an array
          VERSIONS_ARRAY=$(echo $VERSIONS | jq -r '.[]')
          
          # Report URLs for each version
          for VERSION in $VERSIONS_ARRAY; do
            echo "Version $VERSION:"
            echo "- Download: https://github.com/${{ github.repository }}/releases/download/schemas-$VERSION/schemas-$VERSION.zip"
          done
          
          echo ""
          echo "Latest version pointer:"
          echo "- Web: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "- API: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/latest.json"
          echo ""
          echo "Direct schema URLs (always current):"
          echo "- Package: https://raw.githubusercontent.com/${{ github.repository }}/main/package/$HIGHEST_VERSION/hatch_pkg_metadata_schema.json"
          echo "- Registry: https://raw.githubusercontent.com/${{ github.repository }}/main/registry/$HIGHEST_VERSION/hatch_all_pkg_metadata_schema.json"